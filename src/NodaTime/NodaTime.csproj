<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Description>Noda Time is a date and time API acting as an alternative to the built-in DateTime/DateTimeOffset etc types built into the .NET framework.</Description>
    <AssemblyTitle>Noda Time</AssemblyTitle>
    <VersionPrefix>2.3.0</VersionPrefix>
    <Authors>Jon Skeet</Authors>
    <TargetFrameworks>net45;netstandard1.3</TargetFrameworks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyOriginatorKeyFile>../../NodaTime Release.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
    <PackageTags>date;time;timezone;calendar;nodatime</PackageTags>
    <PackageProjectUrl>http://nodatime.org/</PackageProjectUrl>
    <PackageLicenseUrl>http://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/nodatime/nodatime</RepositoryUrl>
    <GenerateNeutralResourcesLanguageAttribute>false</GenerateNeutralResourcesLanguageAttribute>
    <CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
    <Deterministic>True</Deterministic>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="*.resx;TimeZones\Tzdb.nzd" Exclude="bin\**;obj\**;**\*.xproj;packages\**;@(EmbeddedResource)" />
    <None Update="..\..\packaging\_._">
      <PackagePath>lib/native/</PackagePath>
      <Pack>true</Pack>
    </None>
    <None Update="..\..\packaging\NodaTime.targets">
      <PackagePath>build/native/</PackagePath>
      <Pack>true</Pack>
    </None>
  </ItemGroup>

  <ItemGroup Label="dotnet pack instructions">
    <Content Include="$(OutputPath)netstandard1.3\NodaTime.pdb">
      <Pack>true</Pack>
      <PackagePath>lib/netstandard1.3</PackagePath>
    </Content>
    <Content Include="$(OutputPath)net45\NodaTime.pdb">
      <Pack>true</Pack>
      <PackagePath>lib/net45</PackagePath>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="SourceLink.Create.CommandLine" Version="2.1.2" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
    <Reference Include="System.Xml" />
    <Reference Include="System.Numerics" />
    <Reference Include="System" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard1.3' ">
    <PackageReference Include="System.Runtime.Serialization.Xml" Version="4.1.1" />
  </ItemGroup>

  <!--
    - ResX file associations.
    - The generator creates code that doesn't work with .NET Core out of the box;
    - after changing the resx file, change "typeof(...).Assembly"
    - to "typeof(...).GetTypeInfo().Assembly" and add a using directive for System.Reflection.
    - Maybe we ought to just not generate the files...
    -->

  <ItemGroup>
    <Compile Update="Properties\Messages.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Messages.resx</DependentUpon>
    </Compile>
      <Compile Update="Properties\PatternResources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>PatternResources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Messages.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Messages.Designer.cs</LastGenOutput>
    </EmbeddedResource>
      <EmbeddedResource Update="Properties\PatternResources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>PatternResources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

</Project>
